<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!-- 업로드된 파일(사진) 들을 원래 가지는 성격의 파일로 적용하기 위한 설정 -->
	<mvc:resources mapping="/uploadfile/**" location="/uploadfile/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->


	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>

	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- 파일업로드 처리를 위한 multipartResolver bean 등록 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding">
			<beans:value>utf-8</beans:value>
		</beans:property>
	</beans:bean>




	<context:component-scan base-package="com.bitcamp.open" />


	<!-- 데이터베이스 연결을 위한 dataSource 설정 -->
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="com.mysql.jdbc.Driver" />
		<beans:property name="jdbcUrl"
			value="jdbc:mysql://localhost/openproject?characterEncoding=utf8" />
		<beans:property name="user" value="bit" />
		<beans:property name="password" value="bit" />
	</beans:bean>

	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml" />
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" />

	</beans:bean>

	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<beans:constructor-arg ref="sqlSessionFactory" />
	</beans:bean>

<!-- <context:component-scan base-package="com.bitcamp.open.member.dao"></context:component-scan>
<context:component-scan base-package="com.bitcamp.open.member.service"></context:component-scan> -->









	<!-- memberDao 빈 등록 -->
	<beans:bean id="memberDao" class="com.bitcamp.open.member.dao.MemberDao">
		<beans:constructor-arg ref="dataSource" />
	</beans:bean>
	<beans:bean id="myBatisDao" class="com.bitcamp.open.member.dao.MemberMybatisDao" /> 
	
	

	<!-- MemberRegService 빈 등록 <beans:bean id="memberRegService" class="com.bitcamp.open.member.service.MemberRegService"> 
		<beans:property name="dao" ref="memberDao" /> </beans:bean> -->

	<!-- MemberLoginService 빈 등록 : 클래스 코드에서 자동 주입 어노테이션 사용 -->
	<!-- <beans:bean id="memberLoginService" class="com.bitcamp.open.member.service.MemberLoginService"> 
		</beans:bean> <beans:bean id="memberListService" class="com.bitcamp.open.member.service.MemberListService" 
		/> -->


	<!-- 로그인 체크를 위한 인터셉터 등록 -->
	<!-- 여러 핸들러인터셉터를 생정 -->
	<mvc:interceptors>
		<!-- 한개의 핸들러인터셉터를 생성 -->
		<mvc:interceptor>
			<!-- 핸들러인터셉터를 적용할 경로 설정 -->
			<mvc:mapping path="/mypage/**" />
			<!-- 경로중 일부 경로를 제외하고 싶을 때 -->
			<!-- <mvc:exclude-mapping path="/mypage/help/**"/> -->
			<beans:bean class="com.bitcamp.open.interceptor.AutoCheckInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>










	<!-- 트랜젝션 처리 시작 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource">
			<beans:ref bean="dataSource" />
		</beans:property>
	</beans:bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 트랜젝션 처리 끝 -->


	<!-- 엑셀 커스텀 뷰 -->
	<beans:bean id="members"
		class="com.bitcamp.open.member.controller.MemberView" />
	<!-- 파일다운로드 커스텀 뷰 -->
	<beans:bean id="download"
		class="com.bitcamp.open.member.controller.DownloadView" />










</beans:beans>
